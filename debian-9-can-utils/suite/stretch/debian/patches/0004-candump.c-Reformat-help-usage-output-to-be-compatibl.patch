From 36198cc4a6ba7f0e63e7cf8621be763701bb0f8d Mon Sep 17 00:00:00 2001
From: Alexander Gerasiov <gq@debian.org>
Date: Sun, 11 Feb 2018 19:03:05 +0300
Subject: [PATCH 04/25] candump.c: Reformat help/usage output to be compatible
 with help2man.

Signed-off-by: Alexander Gerasiov <gq@debian.org>
---
 candump.c | 33 +++++++++++++++++++++------------
 1 file changed, 21 insertions(+), 12 deletions(-)

diff --git a/candump.c b/candump.c
index f98d1c3..16fc46e 100644
--- a/candump.c
+++ b/candump.c
@@ -1,5 +1,5 @@
 /*
- * candump.c
+ * candump.c - dump CAN bus traffic
  *
  * Copyright (c) 2002-2009 Volkswagen Group Electronic Research
  * All rights reserved.
@@ -115,9 +115,11 @@ static volatile int running = 1;
 
 void print_usage(char *prg)
 {
+	fprintf(stderr, "%s - dump CAN bus traffic.\n", prg);
 	fprintf(stderr, "\nUsage: %s [options] <CAN interface>+\n", prg);
 	fprintf(stderr, "  (use CTRL-C to terminate %s)\n\n", prg);
-	fprintf(stderr, "Options: -t <type>   (timestamp: (a)bsolute/(d)elta/(z)ero/(A)bsolute w date)\n");
+	fprintf(stderr, "Options:\n");
+	fprintf(stderr, "         -t <type>   (timestamp: (a)bsolute/(d)elta/(z)ero/(A)bsolute w date)\n");
 	fprintf(stderr, "         -H          (read hardware timestamps instead of system timestamps)\n");
 	fprintf(stderr, "         -c          (increment color mode level)\n");
 	fprintf(stderr, "         -i          (binary output - may exceed 80 chars/line)\n");
@@ -139,22 +141,29 @@ void print_usage(char *prg)
 	fprintf(stderr, "\n");
 	fprintf(stderr, "Up to %d CAN interfaces with optional filter sets can be specified\n", MAXSOCK);
 	fprintf(stderr, "on the commandline in the form: <ifname>[,filter]*\n");
-	fprintf(stderr, "\nComma separated filters can be specified for each given CAN interface:\n");
-	fprintf(stderr, " <can_id>:<can_mask> (matches when <received_can_id> & mask == can_id & mask)\n");
-	fprintf(stderr, " <can_id>~<can_mask> (matches when <received_can_id> & mask != can_id & mask)\n");
-	fprintf(stderr, " #<error_mask>       (set error frame filter, see include/linux/can/error.h)\n");
-	fprintf(stderr, " [j|J]               (join the given CAN filters - logical AND semantic)\n");
+	fprintf(stderr, "\nFilters:\n");
+	fprintf(stderr, " Comma separated filters can be specified for each given CAN interface.\n");
+	fprintf(stderr, "<can_id>:<can_mask>\n\t(matches when <received_can_id> & mask == can_id & mask)\n");
+	fprintf(stderr, "<can_id>~<can_mask>\n\t(matches when <received_can_id> & mask != can_id & mask)\n");
+	fprintf(stderr, "#<error_mask>\n\t(set error frame filter, see include/linux/can/error.h)\n");
+	fprintf(stderr, "[j|J]\n\t(join the given CAN filters - logical AND semantic)\n");
 	fprintf(stderr, "\nCAN IDs, masks and data content are given and expected in hexadecimal values.\n");
 	fprintf(stderr, "When can_id and can_mask are both 8 digits, they are assumed to be 29 bit EFF.\n");
 	fprintf(stderr, "Without any given filter all data frames are received ('0:0' default filter).\n");
 	fprintf(stderr, "\nUse interface name '%s' to receive from all CAN interfaces.\n", ANYDEV);
 	fprintf(stderr, "\nExamples:\n");
 	fprintf(stderr, "%s -c -c -ta can0,123:7FF,400:700,#000000FF can2,400~7F0 can3 can8\n", prg);
-	fprintf(stderr, "%s -l any,0~0,#FFFFFFFF    (log only error frames but no(!) data frames)\n", prg);
-	fprintf(stderr, "%s -l any,0:0,#FFFFFFFF    (log error frames and also all data frames)\n", prg);
-	fprintf(stderr, "%s vcan2,92345678:DFFFFFFF (match only for extended CAN ID 12345678)\n", prg);
-	fprintf(stderr, "%s vcan2,123:7FF (matches CAN ID 123 - including EFF and RTR frames)\n", prg);
-	fprintf(stderr, "%s vcan2,123:C00007FF (matches CAN ID 123 - only SFF and non-RTR frames)\n", prg);
+	fprintf(stderr, "\n");
+	fprintf(stderr, "%s -l any,0~0,#FFFFFFFF\n", prg);
+	fprintf(stderr, "\t(log only error frames but no(!) data frames)\n");
+	fprintf(stderr, "%s -l any,0:0,#FFFFFFFF\n", prg);
+	fprintf(stderr, "\t(log error frames and also all data frames)\n");
+	fprintf(stderr, "%s vcan2,92345678:DFFFFFFF\n", prg);
+	fprintf(stderr, "\t(match only for extended CAN ID 12345678)\n");
+	fprintf(stderr, "%s vcan2,123:7FF\n", prg);
+	fprintf(stderr, "\t(matches CAN ID 123 - including EFF and RTR frames)\n");
+	fprintf(stderr, "%s vcan2,123:C00007FF\n", prg);
+	fprintf(stderr, "\t(matches CAN ID 123 - only SFF and non-RTR frames)\n");
 	fprintf(stderr, "\n");
 }
 
-- 
2.11.0

