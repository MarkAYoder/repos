#!/bin/sh
#
# see: dh_installdeb(1)

set -e

package="bb-bonescript-installer"
service="bonescript"
npm_file="bonescript-0.5.0-beta7-0cb9978-v0.12.13.tar.xz"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

export NODE_PATH=/usr/local/lib/node_modules

npm_options="--unsafe-perm=true --progress=false --loglevel=error --prefix /usr/local"

npm_actually_install () {
	echo "${package}:Installing: ${pkg}-${ver} (for ${npm_project})"
	TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} ${pkg}@${ver}
	#TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} github:jadonk/bonescript#90f2367839be34b683988c5ad2cbfd0691f3a56a
	echo "${ver}" > "${pkg_path}/${pkg}.version"
	echo "${node_version}" > "${pkg_path}/${pkg}.node_version"
}

npm_check_n_install () {
	pkg_path="${NODE_PATH}/${pkg}"
	if [ ! -f "${pkg_path}/${pkg}.version" ] ; then
		npm_actually_install
	else
		unset old_version
		if [ -f "${pkg_path}/${pkg}.version" ] ; then
			old_version=$(cat "${pkg_path}/${pkg}.version" || true)
		fi
		if [ ! "x${old_version}" = "x${ver}" ] ; then
			rm -rf "${pkg_path}/" || true
			npm_actually_install
		else
			unset old_version
			if [ -f "${pkg_path}/${pkg}.node_version" ] ; then
				old_version=$(cat "${pkg_path}/${pkg}.node_version" || true)
			fi
			if [ ! "x${old_version}" = "x${node_version}" ] ; then
				rm -rf "${pkg_path}/" || true
				npm_actually_install
			fi
		fi
	fi
}

npm_pkg_install () {
	systemctl stop bonescript-autorun.service || true
	if [ -d /usr/local/lib/node_modules/${npm_project}/ ] ; then
		rm -rf /usr/local/lib/node_modules/${npm_project}/ || true
	fi

	echo "${package}:updating: /usr/local/lib/node_modules/${npm_project}/"
	tar xf /var/cache/${package}/${npm_file} -C /usr/local/lib/node_modules/
}

npm_install () {
	node_bin="/usr/bin/nodejs"
	npm_bin="/usr/bin/npm"

	unset node_version
	node_version=$(/usr/bin/nodejs --version || true)

	echo "${package}:npm: [`${node_bin} ${npm_bin} --version`]"
	echo "${package}:node: [`${node_bin} --version`]"

	npm_project="bonescript"
#	pkg="bonescript" ; ver="0.5.0-beta7" ; npm_check_n_install
	npm_pkg_install

	if [ -d /etc/avahi/services/ ] ; then
		#Annouce http server via DNS Sevice Discovery
		wfile="/etc/avahi/services/bone101.service"
		echo "<?xml version=\"1.0\" standalone='no'?><!--*-nxml-*-->" > ${wfile}
		echo "<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">" >> ${wfile}
		echo "" >> ${wfile}
		echo "<!-- See avahi.service(5) for more information about this configuration file -->" >> ${wfile}
		echo "" >> ${wfile}
		echo "<service-group>" >> ${wfile}
		echo "" >> ${wfile}
		echo "  <name replace-wildcards=\"yes\">BeagleBone 101 Getting Started for %h</name>" >> ${wfile}
		echo "  <service>" >> ${wfile}
		echo "" >> ${wfile}
		echo "    <type>_http._tcp</type>" >> ${wfile}
		echo "    <port>80</port>" >> ${wfile}
		echo "  </service>" >> ${wfile}
		echo "" >> ${wfile}
		echo "</service-group>" >> ${wfile}
		chown -R root:root ${wfile}
	fi

	echo "NODE_PATH=/usr/local/lib/node_modules" > /etc/default/node
	echo "export NODE_PATH=/usr/local/lib/node_modules" > /etc/profile.d/node.sh
	chmod 755 /etc/profile.d/node.sh

	systemctl enable bonescript.socket || true
	systemctl enable bonescript-autorun.service || true
	echo "${package}:Installed"
}

case "$1" in
    configure)
	npm_install
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

