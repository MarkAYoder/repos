#!/bin/sh
#
# see: dh_installdeb(1)

set -e

package="bb-node-red-installer"
service="node-red"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

export NODE_PATH=/usr/local/lib/node_modules

npm_options="--unsafe-perm --progress=false --loglevel=error --prefix /usr/local"

npm_actually_install () {
	echo "${package}:Installing: ${pkg}-${ver} (for ${npm_project})"
	TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} ${pkg}@${ver}
	echo "${ver}" > "${NODE_PATH}/${pkg}/${pkg}.version"
	echo "${node_version}" > "${NODE_PATH}/${pkg}/${pkg}.node_version"

	if [ "x${js_patch}" = "xenable" ] ; then
		sed -i -e "s:var server;:require(\'systemd\');\n\nvar server;:"g "${NODE_PATH}/${pkg}/red.js"
		sed -i -e "s:settings.uiPort,settings.uiHost,f:settings.uiPort);\n        server.on(\'listening\', f:"g "${NODE_PATH}/${pkg}/red.js"

		sed -i -e "s:1880,:port,:"g "${NODE_PATH}/${pkg}/settings.js"
		sed -i -e "s:module.exports:var port = process.env.LISTEN_PID > 0 ? \'systemd\' \: 1880;\n\nmodule.exports:"g "${NODE_PATH}/${pkg}/settings.js"
	fi
}

npm_check_n_install () {
	if [ ! -f "${NODE_PATH}/${pkg}/${pkg}.version" ] ; then
		npm_actually_install
	else
		unset old_version
		if [ -f "${NODE_PATH}/${pkg}/${pkg}.version" ] ; then
			old_version=$(cat "${NODE_PATH}/${pkg}/${pkg}.version" || true)
		fi
		if [ ! "x${old_version}" = "x${ver}" ] ; then
			rm -rf "${NODE_PATH}/${pkg}/" || true
			npm_actually_install
		else
			unset old_version
			if [ -f "${NODE_PATH}/${pkg}/${pkg}.node_version" ] ; then
				old_version=$(cat "${NODE_PATH}/${pkg}/${pkg}.node_version" || true)
			fi
			if [ ! "x${old_version}" = "x${node_version}" ] ; then
				rm -rf "${NODE_PATH}/${pkg}/" || true
				npm_actually_install
			fi
		fi
	fi
}

npm_git_install () {
	if [ -d /usr/local/lib/node_modules/node-red-node-beaglebone/ ] ; then
		rm -rf /usr/local/lib/node_modules/node-red-node-beaglebone/ || true
	fi

	if [ -d /tmp/node-red-nodes/ ] ; then
		rm -rf /tmp/node-red-nodes/ || true
	fi

	git clone -b bbgw https://github.com/rcn-ee/node-red-nodes/ /tmp/node-red-nodes --depth=1
	if [ -d /tmp/node-red-nodes/hardware/BBB/ ] ; then
		cd /tmp/node-red-nodes/hardware/BBB/
		TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options}
		cd -
		sync
		rm -rf /tmp/node-red-nodes/
		touch /usr/local/lib/node_modules/node-red-node-beaglebone/.bbgw-dont-load
	fi

	if [ -d /usr/local/lib/node_modules/node-red-node-upm/ ] ; then
		rm -rf /usr/local/lib/node_modules/node-red-node-upm/ || true
	fi

	if [ -d /usr/local/lib/node_modules/node-red-node-bb-upm/ ] ; then
		rm -rf /usr/local/lib/node_modules/node-red-node-bb-upm/ || true
	fi

	TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} https://github.com/Pillar1989/Node-Red-Node-BB-UPM#BBGW
}

npm_install () {
	node_bin="/usr/bin/nodejs"
	npm_bin="/usr/bin/npm"

	#/usr/bin/nodejs-v0.10.x
	#-> /usr/bin/npm (works)
	#-> /usr/local/bin/npm (works)

	#/usr/bin/nodejs-v0.12.x (not built anymore, use nodesource...)
	#-> /usr/bin/npm (broken)
	#-> /usr/local/bin/npm (works)

	unset node_version
	node_version=$(/usr/bin/nodejs --version || true)

	unset test_version
	if [ -f /usr/bin/nodejs-v0.12.x ] ; then
		test_version=$(/usr/bin/nodejs-v0.12.x --version || true)
		if [ "x${test_version}" = "x${node_version}" ] ; then
			node_bin="/usr/bin/nodejs-v0.12.x"
			if [ -f /usr/local/bin/npm ] ; then
				npm_bin="/usr/local/bin/npm"
			else
				#bb-npm-installer would make sure this never happens...
				#nodejs-v0.12.x & /usr/bin/npm broken...
				if [ -f /usr/bin/nodejs-v0.10.x ] ; then
					node_bin="/usr/bin/nodejs-v0.10.x"
				else
					node_bin="/usr/bin/nodejs"
				fi
				npm_bin="/usr/bin/npm"
			fi
		fi
	fi

	echo "${package}:npm: [`${node_bin} ${npm_bin} --version`]"
	echo "${package}:node: [`${node_bin} --version`]"

	unset js_patch
	npm_project="node-red"
	pkg="systemd" ; ver="0.2.6" ; npm_check_n_install
	js_patch="enable"
	pkg="node-red" ; ver="0.13.4" ; npm_check_n_install
	unset js_patch

	if [ -d /usr/lib/node_modules/mraa ] ; then
		ln -sf /usr/lib/node_modules/mraa /usr/local/lib/node_modules || true
		ln -sf /usr/lib/node_modules/jsupm* /usr/local/lib/node_modules || true
	fi

#https://github.com/theoctal/octalbonescript/issues/62
#	pkg="node-red-node-beaglebone" ; ver="0.1.6" ; npm_check_n_install
#	pkg="node-red-node-upm" ; ver="0.3.0" ; npm_check_n_install

	npm_git_install

	pkg="node-red-node-mongodb" ; ver="0.0.5" ; npm_check_n_install

	if [ -d /etc/avahi/services/ ] ; then
		#Annouce http server via DNS Sevice Discovery
		wfile="/etc/avahi/services/node-red.service"
		echo "<?xml version=\"1.0\" standalone='no'?><!--*-nxml-*-->" > ${wfile}
		echo "<!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">" >> ${wfile}
		echo "" >> ${wfile}
		echo "<!-- See avahi.service(5) for more information about this configuration file -->" >> ${wfile}
		echo "" >> ${wfile}
		echo "<service-group>" >> ${wfile}
		echo "" >> ${wfile}
		echo "  <name replace-wildcards=\"yes\">Node-RED for %h</name>" >> ${wfile}
		echo "  <service>" >> ${wfile}
		echo "" >> ${wfile}
		echo "    <type>_http._tcp</type>" >> ${wfile}
		echo "    <port>1880</port>" >> ${wfile}
		echo "  </service>" >> ${wfile}
		echo "" >> ${wfile}
		echo "</service-group>" >> ${wfile}
		chown -R root:root ${wfile}
	fi

	systemctl enable ${service}.socket || true
	systemctl start ${service} || true
	echo "${package}:Installed"
}

case "$1" in
    configure)
	npm_install
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

