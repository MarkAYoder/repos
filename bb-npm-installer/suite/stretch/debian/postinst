#!/bin/sh
#
# see: dh_installdeb(1)

set -e

package="bb-npm-installer"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

export NODE_PATH=/usr/local/lib/node_modules

npm_options="--unsafe-perm --progress=false"

npm_actually_install () {
	# npm: force prefix to /usr/local (npm: 1.4.21 -> 3.7.1)
	${node_bin} ${npm_bin} config set -g prefix /usr/local/

	echo "${package}:Installing: ${pkg}-${ver} (for ${npm_project})"
	TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} ${pkg}@${ver}
	echo "${ver}" > "${NODE_PATH}/${pkg}/${pkg}.version"
	echo "${node_version}" > "${NODE_PATH}/${pkg}/${pkg}.node_version"
}

npm_check_n_install () {
	if [ ! -f "${NODE_PATH}/${pkg}/${pkg}.version" ] ; then
		npm_actually_install
	else
		unset old_version
		if [ -f "${NODE_PATH}/${pkg}/${pkg}.version" ] ; then
			old_version=$(cat "${NODE_PATH}/${pkg}/${pkg}.version" || true)
		fi
		if [ ! "x${old_version}" = "x${ver}" ] ; then
			rm -rf "${NODE_PATH}/${pkg}/" || true
			npm_actually_install
		else
			unset old_version
			if [ -f "${NODE_PATH}/${pkg}/${pkg}.node_version" ] ; then
				old_version=$(cat "${NODE_PATH}/${pkg}/${pkg}.node_version" || true)
			fi
			if [ ! "x${old_version}" = "x${node_version}" ] ; then
				rm -rf "${NODE_PATH}/${pkg}/" || true
				npm_actually_install
			fi
		fi
	fi
}

npm_install () {
	node_bin="/usr/bin/nodejs"
	npm_bin="/usr/bin/npm"

	#/usr/bin/nodejs-v0.10.x
	#-> /usr/bin/npm (works)
	#-> /usr/local/bin/npm (works)

	#/usr/bin/nodejs-v0.12.x
	#-> /usr/bin/npm (broken)
	#-> /usr/local/bin/npm (works)

	unset node_version
	node_version=$(/usr/bin/nodejs --version || true)

	#wheezy + jessie
	unset test_version
	if [ -f /usr/bin/nodejs-v0.10.x ] ; then
		test_version=$(/usr/bin/nodejs-v0.10.x --version || true)
		if [ "x${test_version}" = "x${node_version}" ] ; then
			node_bin="/usr/bin/nodejs-v0.10.x"
			if [ -f /usr/local/bin/npm ] ; then
				npm_bin="/usr/local/bin/npm"
			else
				npm_bin="/usr/bin/npm"
			fi
		fi
	fi

#	bb-npm-installer always build with nodejs-v0.10.x
#	#jessie + stretch
#	unset test_version
#	if [ -f /usr/bin/nodejs-v0.12.x ] ; then
#		test_version=$(/usr/bin/nodejs-v0.12.x --version || true)
#		if [ "x${test_version}" = "x${node_version}" ] ; then
#			node_bin="/usr/bin/nodejs-v0.12.x"
#			if [ -f /usr/local/bin/npm ] ; then
#				npm_bin="/usr/local/bin/npm"
#			else
#				#bb-npm-installer would make sure this never happens...
#				#nodejs-v0.12.x & /usr/bin/npm broken...
#				node_bin="/usr/bin/nodejs-v0.10.x"
#				npm_bin="/usr/bin/npm"
#			fi
#		fi
#	fi

	echo "${package}:npm: [`${node_bin} ${npm_bin} --version`]"
	echo "${package}:node: [`${node_bin} --version`]"

	npm_project="bb-npm-installer"
	pkg="npm" ; ver="3.7.4" ; npm_check_n_install
	echo "${package}:Installed"
}

case "$1" in
    configure)
	npm_install
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

