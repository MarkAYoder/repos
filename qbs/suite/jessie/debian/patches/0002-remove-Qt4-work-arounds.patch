From aea692f6ab9b22dabfeb8aadadc533ec9b95888b Mon Sep 17 00:00:00 2001
From: Joerg Bornemann <joerg.bornemann@theqtcompany.com>
Date: Fri, 6 Feb 2015 15:09:45 +0100
Subject: [PATCH 2/7] remove Qt4 work-arounds

QStringList::join supports QLatin1Char arguments in Qt5.

Change-Id: Ic840473f0cb54c8c2a781bec3356c3c3c8e113af
Reviewed-by: Christian Kandeler <christian.kandeler@theqtcompany.com>
---
 src/app/config-ui/commandlineparser.cpp            | 2 +-
 src/app/qbs-setup-android/commandlineparser.cpp    | 2 +-
 src/app/qbs-setup-qt/commandlineparser.cpp         | 2 +-
 src/app/qbs-setup-toolchains/commandlineparser.cpp | 2 +-
 src/app/qbs-setup-toolchains/probe.cpp             | 2 +-
 src/app/qbs/commandlinefrontend.cpp                | 6 +++---
 src/app/qbs/parser/command.cpp                     | 2 +-
 src/lib/corelib/buildgraph/rulesapplicator.cpp     | 6 +++---
 src/lib/corelib/language/itemreaderastvisitor.cpp  | 4 ++--
 src/lib/corelib/language/language.cpp              | 8 ++++----
 src/lib/corelib/language/moduleloader.cpp          | 2 +-
 src/lib/corelib/language/projectresolver.cpp       | 2 +-
 src/lib/corelib/tools/error.cpp                    | 2 +-
 tests/auto/api/tst_api.cpp                         | 4 ++--
 tests/fuzzy-test/fuzzytester.cpp                   | 2 +-
 15 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/src/app/config-ui/commandlineparser.cpp b/src/app/config-ui/commandlineparser.cpp
index 270f9cc..6b4c2d2 100644
--- a/src/app/config-ui/commandlineparser.cpp
+++ b/src/app/config-ui/commandlineparser.cpp
@@ -93,5 +93,5 @@ void CommandLineParser::assignOptionArgument(const QString &option, QString &arg
 void CommandLineParser::complainAboutExtraArguments()
 {
     throwError(Tr::tr("Extraneous command-line arguments '%1'.")
-               .arg(m_commandLine.join(QLatin1String(" "))));
+               .arg(m_commandLine.join(QLatin1Char(' '))));
 }
diff --git a/src/app/qbs-setup-android/commandlineparser.cpp b/src/app/qbs-setup-android/commandlineparser.cpp
index 2b873bd..cd13f1b 100644
--- a/src/app/qbs-setup-android/commandlineparser.cpp
+++ b/src/app/qbs-setup-android/commandlineparser.cpp
@@ -128,6 +128,6 @@ void CommandLineParser::assignOptionArgument(const QString &option, QString &arg
 void CommandLineParser::complainAboutExtraArguments()
 {
     throwError(Tr::tr("Extraneous command-line arguments '%1'.")
-               .arg(m_commandLine.join(QLatin1String(" "))));
+               .arg(m_commandLine.join(QLatin1Char(' '))));
 }
 
diff --git a/src/app/qbs-setup-qt/commandlineparser.cpp b/src/app/qbs-setup-qt/commandlineparser.cpp
index 4338cce..b799a8b 100644
--- a/src/app/qbs-setup-qt/commandlineparser.cpp
+++ b/src/app/qbs-setup-qt/commandlineparser.cpp
@@ -121,5 +121,5 @@ void CommandLineParser::assignOptionArgument(const QString &option, QString &arg
 void CommandLineParser::complainAboutExtraArguments()
 {
     throwError(Tr::tr("Extraneous command-line arguments '%1'.")
-               .arg(m_commandLine.join(QLatin1String(" "))));
+               .arg(m_commandLine.join(QLatin1Char(' '))));
 }
diff --git a/src/app/qbs-setup-toolchains/commandlineparser.cpp b/src/app/qbs-setup-toolchains/commandlineparser.cpp
index 5e9e53d..7e93e20 100644
--- a/src/app/qbs-setup-toolchains/commandlineparser.cpp
+++ b/src/app/qbs-setup-toolchains/commandlineparser.cpp
@@ -128,5 +128,5 @@ void CommandLineParser::assignOptionArgument(const QString &option, QString &arg
 void CommandLineParser::complainAboutExtraArguments()
 {
     throwError(Tr::tr("Extraneous command-line arguments '%1'.")
-               .arg(m_commandLine.join(QLatin1String(" "))));
+               .arg(m_commandLine.join(QLatin1Char(' '))));
 }
diff --git a/src/app/qbs-setup-toolchains/probe.cpp b/src/app/qbs-setup-toolchains/probe.cpp
index dcc8926..0ae9f6c 100644
--- a/src/app/qbs-setup-toolchains/probe.cpp
+++ b/src/app/qbs-setup-toolchains/probe.cpp
@@ -224,7 +224,7 @@ static Profile createGccProfile(const QString &compilerFilePath, Settings *setti
     if (compilerName.contains(QLatin1Char('-'))) {
         QStringList nameParts = compilerName.split(QLatin1Char('-'));
         profile.setValue(QLatin1String("cpp.compilerName"), nameParts.takeLast());
-        toolchainPrefix = nameParts.join(QLatin1String("-")) + QLatin1Char('-');
+        toolchainPrefix = nameParts.join(QLatin1Char('-')) + QLatin1Char('-');
         profile.setValue(QLatin1String("cpp.toolchainPrefix"), toolchainPrefix);
     }
     profile.setValue(QLatin1String("cpp.linkerName"),
diff --git a/src/app/qbs/commandlinefrontend.cpp b/src/app/qbs/commandlinefrontend.cpp
index 7e7f3e5..c4ec96b 100644
--- a/src/app/qbs/commandlinefrontend.cpp
+++ b/src/app/qbs/commandlinefrontend.cpp
@@ -299,10 +299,10 @@ void CommandLineFrontend::handleProcessResultReport(const qbs::ProcessResult &re
 
     (result.success() ? qbsInfo() : qbsError())
             << QDir::toNativeSeparators(result.executableFilePath()) << " "
-            << result.arguments().join(QLatin1String(" "))
+            << result.arguments().join(QLatin1Char(' '))
             << (hasOutput ? QString::fromLatin1("\n") : QString())
-            << (result.stdOut().isEmpty() ? QString() : result.stdOut().join(QLatin1String("\n")))
-            << (result.stdErr().isEmpty() ? QString() : result.stdErr().join(QLatin1String("\n")));
+            << (result.stdOut().isEmpty() ? QString() : result.stdOut().join(QLatin1Char('\n')))
+            << (result.stdErr().isEmpty() ? QString() : result.stdErr().join(QLatin1Char('\n')));
 }
 
 bool CommandLineFrontend::resolvingMultipleProjects() const
diff --git a/src/app/qbs/parser/command.cpp b/src/app/qbs/parser/command.cpp
index 7fab5a7..1d3a580 100644
--- a/src/app/qbs/parser/command.cpp
+++ b/src/app/qbs/parser/command.cpp
@@ -52,7 +52,7 @@ void Command::parse(QStringList &input)
     parseMore(input);
     if (!input.isEmpty()) {
         throw ErrorInfo(Tr::tr("Invalid use of command '%1': Extraneous input '%2'.\nUsage: %3")
-                    .arg(representation(), input.join(QLatin1String(" ")), longDescription()));
+                    .arg(representation(), input.join(QLatin1Char(' ')), longDescription()));
     }
 }
 
diff --git a/src/lib/corelib/buildgraph/rulesapplicator.cpp b/src/lib/corelib/buildgraph/rulesapplicator.cpp
index 74e4c19..34a53c9 100644
--- a/src/lib/corelib/buildgraph/rulesapplicator.cpp
+++ b/src/lib/corelib/buildgraph/rulesapplicator.cpp
@@ -229,7 +229,7 @@ void RulesApplicator::doApply(const ArtifactSet &inputArtifacts, QScriptValue &p
             scriptValue = engine()->evaluate(binding.code);
             if (Q_UNLIKELY(engine()->hasErrorOrException(scriptValue))) {
                 QString msg = QLatin1String("evaluating rule binding '%1': %2");
-                throw ErrorInfo(msg.arg(binding.name.join(QLatin1String(".")),
+                throw ErrorInfo(msg.arg(binding.name.join(QLatin1Char('.')),
                                         scriptValue.toString()), binding.location);
             }
             setConfigProperty(artifactModulesCfg, binding.name, scriptValue.toVariant());
@@ -433,7 +433,7 @@ public:
             const QStringList valuePath = findValuePath(artifactCfg, nvp.first);
             if (valuePath.isEmpty()) {
                 throw ErrorInfo(Tr::tr("Cannot set module property %1 on artifact %2.")
-                                .arg(nvp.first.join(QLatin1String(".")),
+                                .arg(nvp.first.join(QLatin1Char('.')),
                                      outputArtifact->filePath()));
             }
             setConfigProperty(artifactCfg, valuePath, nvp.second);
@@ -445,7 +445,7 @@ public:
     {
         QStringList tmp = nameParts;
         const QString propertyName = tmp.takeLast();
-        const QString moduleName = tmp.join(QLatin1String("."));
+        const QString moduleName = tmp.join(QLatin1Char('.'));
         const QStringList modulePath = findModulePath(cfg, moduleName);
         if (modulePath.isEmpty())
             return modulePath;
diff --git a/src/lib/corelib/language/itemreaderastvisitor.cpp b/src/lib/corelib/language/itemreaderastvisitor.cpp
index 404403c..6d80ba6 100644
--- a/src/lib/corelib/language/itemreaderastvisitor.cpp
+++ b/src/lib/corelib/language/itemreaderastvisitor.cpp
@@ -261,7 +261,7 @@ bool ItemReaderASTVisitor::visit(AST::UiImportList *uiImportList)
             }
             if (Q_UNLIKELY(!found)) {
                 throw ErrorInfo(Tr::tr("import %1 not found")
-                                .arg(importUri.join(QLatin1String("."))),
+                                .arg(importUri.join(QLatin1Char('.'))),
                                 toCodeLocation(import->fileNameToken));
             }
         }
@@ -332,7 +332,7 @@ void ItemReaderASTVisitor::checkDuplicateBinding(Item *item, const QStringList &
 {
     if (Q_UNLIKELY(item->properties().contains(bindingName.last()))) {
         QString msg = Tr::tr("Duplicate binding for '%1'");
-        throw ErrorInfo(msg.arg(bindingName.join(QLatin1String("."))),
+        throw ErrorInfo(msg.arg(bindingName.join(QLatin1Char('.'))),
                     qbs::Internal::toCodeLocation(m_file->filePath(), sourceLocation));
     }
 }
diff --git a/src/lib/corelib/language/language.cpp b/src/lib/corelib/language/language.cpp
index 1aede78..62cfa67 100644
--- a/src/lib/corelib/language/language.cpp
+++ b/src/lib/corelib/language/language.cpp
@@ -336,9 +336,9 @@ QString Rule::toString() const
     outputTagsSorted.sort();
     QStringList inputTagsSorted = inputs.toStringList();
     inputTagsSorted.sort();
-    return QLatin1Char('[') + outputTagsSorted.join(QLatin1String(","))
+    return QLatin1Char('[') + outputTagsSorted.join(QLatin1Char(','))
             + QLatin1String("][")
-            + inputTagsSorted.join(QLatin1String(",")) + QLatin1Char(']');
+            + inputTagsSorted.join(QLatin1Char(',')) + QLatin1Char(']');
 }
 
 bool Rule::acceptsAsInput(Artifact *artifact) const
@@ -1200,7 +1200,7 @@ QString keyFromElem(const ArtifactPropertiesPtr &ap)
 {
     QStringList lst = ap->fileTagsFilter().toStringList();
     lst.sort();
-    return lst.join(QLatin1String(","));
+    return lst.join(QLatin1Char(','));
 }
 
 bool operator==(const SourceArtifact &sa1, const SourceArtifact &sa2)
@@ -1273,7 +1273,7 @@ bool operator==(const RuleArtifact::Binding &b1, const RuleArtifact::Binding &b2
 
 uint qHash(const RuleArtifact::Binding &b)
 {
-    return qHash(qMakePair(b.code, b.name.join(QLatin1String(","))));
+    return qHash(qMakePair(b.code, b.name.join(QLatin1Char(','))));
 }
 
 bool artifactPropertyListsAreEqual(const QList<ArtifactPropertiesPtr> &l1,
diff --git a/src/lib/corelib/language/moduleloader.cpp b/src/lib/corelib/language/moduleloader.cpp
index 6d95d49..9526cc8 100644
--- a/src/lib/corelib/language/moduleloader.cpp
+++ b/src/lib/corelib/language/moduleloader.cpp
@@ -920,7 +920,7 @@ static QVariant convertToPropertyType(const QVariant &v, PropertyDeclaration::Ty
         QStringList name = namePrefix;
         name << key;
         throw ErrorInfo(Tr::tr("Value '%1' of property '%2' has incompatible type.")
-                        .arg(v.toString(), name.join(QLatin1String("."))));
+                        .arg(v.toString(), name.join(QLatin1Char('.'))));
     }
     return c;
 }
diff --git a/src/lib/corelib/language/projectresolver.cpp b/src/lib/corelib/language/projectresolver.cpp
index 4bb1967..91bbeea 100644
--- a/src/lib/corelib/language/projectresolver.cpp
+++ b/src/lib/corelib/language/projectresolver.cpp
@@ -601,7 +601,7 @@ void ProjectResolver::resolveGroup(Item *item, ProjectContext *projectContext)
 static QString sourceCodeAsFunction(const JSSourceValueConstPtr &value,
         const PropertyDeclaration &decl)
 {
-    const QString args = decl.functionArgumentNames().join(QLatin1String(","));
+    const QString args = decl.functionArgumentNames().join(QLatin1Char(','));
     if (value->hasFunctionForm()) {
         // Insert the argument list.
         QString code = value->sourceCodeForEvaluation();
diff --git a/src/lib/corelib/tools/error.cpp b/src/lib/corelib/tools/error.cpp
index 8c10e0a..d114fda 100644
--- a/src/lib/corelib/tools/error.cpp
+++ b/src/lib/corelib/tools/error.cpp
@@ -183,7 +183,7 @@ QString ErrorInfo::toString() const
     QStringList lines;
     foreach (const ErrorItem &e, d->items)
         lines.append(e.toString());
-    return lines.join(QLatin1String("\n"));
+    return lines.join(QLatin1Char('\n'));
 }
 
 /*!
diff --git a/tests/auto/api/tst_api.cpp b/tests/auto/api/tst_api.cpp
index 4816b1b..cd58c99 100644
--- a/tests/auto/api/tst_api.cpp
+++ b/tests/auto/api/tst_api.cpp
@@ -82,8 +82,8 @@ public:
 
 private slots:
     void handleProcessResult(const qbs::ProcessResult &result) {
-        output += result.stdErr().join(QLatin1String("\n"));
-        output += result.stdOut().join(QLatin1String("\n"));
+        output += result.stdErr().join(QLatin1Char('\n'));
+        output += result.stdOut().join(QLatin1Char('\n'));
     }
 };
 
diff --git a/tests/fuzzy-test/fuzzytester.cpp b/tests/fuzzy-test/fuzzytester.cpp
index 07fd8ff..eb5fdb4 100644
--- a/tests/fuzzy-test/fuzzytester.cpp
+++ b/tests/fuzzy-test/fuzzytester.cpp
@@ -202,7 +202,7 @@ bool FuzzyTester::doCleanBuild(QString *errorMessage)
 void FuzzyTester::throwIncrementalBuildError(const QString &message,
                                              const QStringList &commitSequence)
 {
-    const QString commitSequenceString = commitSequence.join(QLatin1String(","));
+    const QString commitSequenceString = commitSequence.join(QLatin1Char(','));
     throw TestError(QString::fromLocal8Bit("Found qbs bug with incremental build!\n"
             "%1\n"
             "The sequence of commits was: %2.").arg(message, commitSequenceString));
-- 
2.1.4

