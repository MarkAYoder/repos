From cd0c7c663bff25d49ce64614242645edd7b43c6b Mon Sep 17 00:00:00 2001
From: Jake Petroules <jake.petroules@petroules.com>
Date: Fri, 20 Mar 2015 22:17:11 -0700
Subject: [PATCH 5/7] Try to forward "bad interpreter" errors to the user.

Change-Id: If287b7480be854f4bae055ed9d575f16fd6f54df
Reviewed-by: Joerg Bornemann <joerg.bornemann@theqtcompany.com>
---
 src/lib/corelib/api/runenvironment.cpp             | 23 +++++++++-
 .../corelib/buildgraph/processcommandexecutor.cpp  | 12 +++++-
 src/lib/corelib/tools/shellutils.cpp               | 16 +++++++
 src/lib/corelib/tools/shellutils.h                 |  1 +
 .../testdata/badInterpreter/badInterpreter.qbs     | 49 ++++++++++++++++++++++
 .../qbs/modules/script-test/script-test.qbs        | 39 +++++++++++++++++
 .../testdata/badInterpreter/script-interp-missing  |  1 +
 .../testdata/badInterpreter/script-interp-noexec   |  1 +
 .../blackbox/testdata/badInterpreter/script-noexec |  0
 .../blackbox/testdata/badInterpreter/script-ok     |  1 +
 tests/auto/blackbox/tst_blackbox.cpp               | 24 +++++++++++
 tests/auto/blackbox/tst_blackbox.h                 |  1 +
 12 files changed, 166 insertions(+), 2 deletions(-)
 create mode 100644 tests/auto/blackbox/testdata/badInterpreter/badInterpreter.qbs
 create mode 100644 tests/auto/blackbox/testdata/badInterpreter/qbs/modules/script-test/script-test.qbs
 create mode 100755 tests/auto/blackbox/testdata/badInterpreter/script-interp-missing
 create mode 100755 tests/auto/blackbox/testdata/badInterpreter/script-interp-noexec
 create mode 100644 tests/auto/blackbox/testdata/badInterpreter/script-noexec
 create mode 100755 tests/auto/blackbox/testdata/badInterpreter/script-ok

diff --git a/src/lib/corelib/api/runenvironment.cpp b/src/lib/corelib/api/runenvironment.cpp
index 147306d..59430ce 100644
--- a/src/lib/corelib/api/runenvironment.cpp
+++ b/src/lib/corelib/api/runenvironment.cpp
@@ -41,6 +41,7 @@
 #include <tools/installoptions.h>
 #include <tools/preferences.h>
 #include <tools/propertyfinder.h>
+#include <tools/shellutils.h>
 
 #include <QDir>
 #include <QProcess>
@@ -201,7 +202,27 @@ int RunEnvironment::runTarget(const QString &targetBin, const QStringList &argum
     process.setProcessEnvironment(d->resolvedProduct->runEnvironment);
     process.setProcessChannelMode(QProcess::ForwardedChannels);
     process.start(targetExecutable, targetArguments);
-    process.waitForFinished(-1);
+    if (!process.waitForFinished(-1)) {
+        if (process.error() == QProcess::FailedToStart) {
+            QString errorPrefixString;
+#ifdef Q_OS_UNIX
+            if (QFileInfo(targetExecutable).isExecutable()) {
+                const QString interpreter(shellInterpreter(targetExecutable));
+                if (!interpreter.isEmpty()) {
+                    errorPrefixString = Tr::tr("%1: bad interpreter: ").arg(interpreter);
+                }
+            }
+#endif
+            throw ErrorInfo(Tr::tr("The process '%1' could not be started: %2")
+                            .arg(targetExecutable)
+                            .arg(errorPrefixString + process.errorString()));
+        } else {
+            d->logger.qbsWarning()
+                    << "QProcess error: " << process.errorString();
+        }
+
+        return EXIT_FAILURE;
+    }
     return process.exitCode();
 }
 
diff --git a/src/lib/corelib/buildgraph/processcommandexecutor.cpp b/src/lib/corelib/buildgraph/processcommandexecutor.cpp
index 89782db..40c8908 100644
--- a/src/lib/corelib/buildgraph/processcommandexecutor.cpp
+++ b/src/lib/corelib/buildgraph/processcommandexecutor.cpp
@@ -47,6 +47,7 @@
 #include <tools/processresult_p.h>
 #include <tools/qbsassert.h>
 #include <tools/scripttools.h>
+#include <tools/shellutils.h>
 
 #include <QDir>
 #include <QScriptEngine>
@@ -243,8 +244,17 @@ void ProcessCommandExecutor::onProcessError()
     case QProcess::FailedToStart: {
         removeResponseFile();
         const QString binary = QDir::toNativeSeparators(processCommand()->program());
+        QString errorPrefixString;
+#ifdef Q_OS_UNIX
+        if (QFileInfo(binary).isExecutable()) {
+            const QString interpreter(shellInterpreter(binary));
+            if (!interpreter.isEmpty()) {
+                errorPrefixString = Tr::tr("%1: bad interpreter: ").arg(interpreter);
+            }
+        }
+#endif
         emit finished(ErrorInfo(Tr::tr("The process '%1' could not be started: %2")
-                                .arg(binary, m_process.errorString())));
+                                .arg(binary, errorPrefixString + m_process.errorString())));
         break;
     }
     case QProcess::Crashed:
diff --git a/src/lib/corelib/tools/shellutils.cpp b/src/lib/corelib/tools/shellutils.cpp
index 1c54f32..d6dbdfd 100644
--- a/src/lib/corelib/tools/shellutils.cpp
+++ b/src/lib/corelib/tools/shellutils.cpp
@@ -30,11 +30,27 @@
 ****************************************************************************/
 
 #include "shellutils.h"
+#include <QFile>
 #include <QRegExp>
+#include <QTextStream>
 
 namespace qbs {
 namespace Internal {
 
+QString shellInterpreter(const QString &filePath) {
+    QFile file(filePath);
+    if (file.open(QIODevice::ReadOnly)) {
+        QTextStream ts(&file);
+        const QString shebang = ts.readLine();
+        if (shebang.startsWith(QLatin1String("#!"))) {
+            return (shebang.mid(2).split(QRegExp("\\s"),
+                                         QString::SkipEmptyParts) << QString()).first();
+        }
+    }
+
+    return QString();
+}
+
 // hasSpecialChars, shellQuoteUnix, shellQuoteWin: all from qtbase/qmake/library/ioutils.cpp
 
 inline static bool hasSpecialChars(const QString &arg, const uchar (&iqm)[16])
diff --git a/src/lib/corelib/tools/shellutils.h b/src/lib/corelib/tools/shellutils.h
index 3361054..a43c18e 100644
--- a/src/lib/corelib/tools/shellutils.h
+++ b/src/lib/corelib/tools/shellutils.h
@@ -39,6 +39,7 @@
 namespace qbs {
 namespace Internal {
 
+QBS_EXPORT QString shellInterpreter(const QString &filePath);
 QBS_EXPORT QString shellQuoteUnix(const QString &arg);
 QBS_EXPORT QString shellQuoteWin(const QString &arg);
 
diff --git a/tests/auto/blackbox/testdata/badInterpreter/badInterpreter.qbs b/tests/auto/blackbox/testdata/badInterpreter/badInterpreter.qbs
new file mode 100644
index 0000000..a453914
--- /dev/null
+++ b/tests/auto/blackbox/testdata/badInterpreter/badInterpreter.qbs
@@ -0,0 +1,49 @@
+import qbs
+
+Project {
+    qbsSearchPaths: base.concat(["qbs"])
+
+    Product {
+        Depends { name: "script-test" }
+        name: "script-ok"
+        type: ["application"]
+
+        Group {
+            files: [product.name]
+            fileTags: ["script"]
+        }
+    }
+
+    Product {
+        Depends { name: "script-test" }
+        name: "script-noexec"
+        type: ["application"]
+
+        Group {
+            files: [product.name]
+            fileTags: ["script"]
+        }
+    }
+
+    Product {
+        Depends { name: "script-test" }
+        name: "script-interp-missing"
+        type: ["application"]
+
+        Group {
+            files: [product.name]
+            fileTags: ["script"]
+        }
+    }
+
+    Product {
+        Depends { name: "script-test" }
+        name: "script-interp-noexec"
+        type: ["application"]
+
+        Group {
+            files: [product.name]
+            fileTags: ["script"]
+        }
+    }
+}
diff --git a/tests/auto/blackbox/testdata/badInterpreter/qbs/modules/script-test/script-test.qbs b/tests/auto/blackbox/testdata/badInterpreter/qbs/modules/script-test/script-test.qbs
new file mode 100644
index 0000000..79c008c
--- /dev/null
+++ b/tests/auto/blackbox/testdata/badInterpreter/qbs/modules/script-test/script-test.qbs
@@ -0,0 +1,39 @@
+import qbs
+import qbs.FileInfo
+import qbs.TextFile
+
+Module {
+    name: "script-test"
+
+    Rule {
+        inputs: ["script"]
+
+        Artifact {
+            filePath: FileInfo.joinPaths(project.buildDirectory, input.fileName)
+            fileTags: ["application"]
+        }
+
+        prepare: {
+            var cmds = [];
+            var cmd = new JavaScriptCommand();
+            cmd.description = "copying " + input.fileName;
+            cmd.sourceCode = function() {
+                var tf = new TextFile(input.filePath, TextFile.ReadOnly);
+                var s = tf.readAll().replace("$PWD", project.buildDirectory);
+                tf.close();
+                var tf2 = new TextFile(output.filePath, TextFile.ReadWrite);
+                tf2.write(s);
+                tf2.close();
+            };
+            cmds.push(cmd);
+
+            if (output.fileName !== "script-noexec") {
+                var cmd2 = new Command("chmod", ["+x", output.filePath]);
+                cmd2.silent = true;
+                cmds.push(cmd2);
+            }
+
+            return cmds;
+        }
+    }
+}
diff --git a/tests/auto/blackbox/testdata/badInterpreter/script-interp-missing b/tests/auto/blackbox/testdata/badInterpreter/script-interp-missing
new file mode 100755
index 0000000..b92a0e9
--- /dev/null
+++ b/tests/auto/blackbox/testdata/badInterpreter/script-interp-missing
@@ -0,0 +1 @@
+#!/does/not/exist
diff --git a/tests/auto/blackbox/testdata/badInterpreter/script-interp-noexec b/tests/auto/blackbox/testdata/badInterpreter/script-interp-noexec
new file mode 100755
index 0000000..8a336b9
--- /dev/null
+++ b/tests/auto/blackbox/testdata/badInterpreter/script-interp-noexec
@@ -0,0 +1 @@
+#!$PWD/script-noexec
diff --git a/tests/auto/blackbox/testdata/badInterpreter/script-noexec b/tests/auto/blackbox/testdata/badInterpreter/script-noexec
new file mode 100644
index 0000000..e69de29
diff --git a/tests/auto/blackbox/testdata/badInterpreter/script-ok b/tests/auto/blackbox/testdata/badInterpreter/script-ok
new file mode 100755
index 0000000..a9bf588
--- /dev/null
+++ b/tests/auto/blackbox/testdata/badInterpreter/script-ok
@@ -0,0 +1 @@
+#!/bin/bash
diff --git a/tests/auto/blackbox/tst_blackbox.cpp b/tests/auto/blackbox/tst_blackbox.cpp
index 001d308..d8b35a4 100644
--- a/tests/auto/blackbox/tst_blackbox.cpp
+++ b/tests/auto/blackbox/tst_blackbox.cpp
@@ -2287,4 +2287,28 @@ void TestBlackbox::testLoadableModule()
     QCOMPARE(runQbs(), 0);
 }
 
+void TestBlackbox::testBadInterpreter()
+{
+    if (!HostOsInfo::isAnyUnixHost())
+        QSKIP("only applies on Unix");
+
+    QDir::setCurrent(testDataDir + QLatin1String("/badInterpreter"));
+    QCOMPARE(runQbs(), 0);
+
+    QbsRunParameters params("run");
+    params.expectFailure = true;
+
+    params.arguments = QStringList() << "-p" << "script-interp-missing";
+    QCOMPARE(runQbs(params), 1);
+    QVERIFY(m_qbsStderr.contains("bad interpreter: No such file or directory"));
+
+    params.arguments = QStringList() << "-p" << "script-interp-noexec";
+    QCOMPARE(runQbs(params), 1);
+    QVERIFY(m_qbsStderr.contains("bad interpreter: Permission denied"));
+
+    params.arguments = QStringList() << "-p" << "script-noexec";
+    QCOMPARE(runQbs(params), 1);
+    QCOMPARE(runQbs(QbsRunParameters("run", QStringList() << "-p" << "script-ok")), 0);
+}
+
 QTEST_MAIN(TestBlackbox)
diff --git a/tests/auto/blackbox/tst_blackbox.h b/tests/auto/blackbox/tst_blackbox.h
index 8cae641..2a5fa0f 100644
--- a/tests/auto/blackbox/tst_blackbox.h
+++ b/tests/auto/blackbox/tst_blackbox.h
@@ -171,6 +171,7 @@ private slots:
     void testObjcArc();
     void wildCardsAndRules();
     void testLoadableModule();
+    void testBadInterpreter();
 
 private:
     QByteArray m_qbsStderr;
-- 
2.1.4

