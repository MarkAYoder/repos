#!/usr/bin/make -f

export DEB_BUILD_MAINT_OPTIONS = hardening=+all,-pie

include /usr/share/cdbs/1/rules/utils.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk

# recent OpenSSL needed because https://github.com/nodejs/node/issues/589
ssl-minver = 1.0.2

# uv minimum of 1.15.0
uv-minver = 1.15.0

# source equivalent of nodejs -e 'console.log(process.versions.modules)'
abi := $(shell awk '/^\#define NODE_MODULE_VERSION/ {print $$3}' src/node_version.h)
abi-deps = nodejs-dev (>= $(DEB_VERSION)~), nodejs-abi-$(abi)

# Build-depend unversioned on debhelper
#  TODO: Drop when adopted in cdbs
CDBS_BUILD_DEPENDS_rules_debhelper_v9 = debhelper (>=9.20160114)

# Do not install licensecheck please
CDBS_BUILD_DEPENDS_rules_utils_copyright-check =

# Needed by upstream build
#  * recent gyp needed to build using flock
bdeps = openssl (>= $(ssl-minver)), pkg-config
bdeps +=, bash-completion, curl, procps, zlib1g-dev, libicu-dev, libc-ares-dev (>= 1.11.0), libhttp-parser-dev (>= 2.8~)
bdeps +=, libkvm-dev [kfreebsd-any], gyp (>= 0.1~svn1773)
# Needed for tests
bdeps +=, ca-certificates

# Needed by upstream build and binary development package
deps = python, libssl-dev (>= $(ssl-minver))
deps +=, libuv1-dev (>= $(uv-minver))

CDBS_BUILD_DEPENDS +=, $(bdeps), $(deps)
CDBS_DEPENDS_nodejs-dev = $(deps)
CDBS_RECOMMENDS_nodejs = ca-certificates
CDBS_PROVIDES_nodejs = nodejs-abi-$(abi)

# suppress checking binary files, to not upset dpkg-source
DEB_COPYRIGHT_CHECK_IGNORE_REGEX = ^(deps/v8/benchmarks/v8-logo\.png|test/fixtures/person\.jpg.*|test/fixtures/sample\.png|test/fixtures/google_ssl_hello\.bin|test/fixtures/test_cert\.pfx|src/res/node\.ico|debian/(changelog|copyright(|_hints|_newhints)))$

DEB_CONFIGURE_NORMAL_ARGS =
DEB_CONFIGURE_EXTRA_FLAGS = --without-npm \
--without-snapshot \
--shared-openssl \
--shared-zlib \
--shared-cares \
--shared-http-parser \
--with-intl=system-icu \
--prefix=/usr \
--openssl-use-def-ca-store \
--shared-libuv

# map HOST ARCH AND OS, and if unknown let upstream guess

# ia32 x64 x32 arm arm64 mips mipsel mips64el x87 ppc ppc64
destCpu =
destCpu := $(or $(destCpu),$(if $(filter i386,$(DEB_HOST_ARCH)),ia32))
destCpu := $(or $(destCpu),$(if $(filter x32,$(DEB_HOST_ARCH)),x32))
destCpu := $(or $(destCpu),$(if $(filter kfreebsd-i386,$(DEB_HOST_ARCH)),ia32))
destCpu := $(or $(destCpu),$(if $(filter hurd-i386,$(DEB_HOST_ARCH)),ia32))
destCpu := $(or $(destCpu),$(if $(filter amd64,$(DEB_HOST_ARCH)),x64))
destCpu := $(or $(destCpu),$(if $(filter kfreebsd-amd64,$(DEB_HOST_ARCH)),x64))
destCpu := $(or $(destCpu),$(if $(filter armel,$(DEB_HOST_ARCH)),unsupported))
destCpu := $(or $(destCpu),$(if $(filter armhf,$(DEB_HOST_ARCH)),arm))
destCpu := $(or $(destCpu),$(if $(filter aarch64,$(DEB_HOST_ARCH)),arm64))
destCpu := $(or $(destCpu),$(if $(filter mipsel,$(DEB_HOST_ARCH)),mipsel))
destCpu := $(or $(destCpu),$(if $(filter mips64el,$(DEB_HOST_ARCH)),mips64el))
destCpu := $(or $(destCpu),$(if $(filter mips,$(DEB_HOST_ARCH)),mips))
destCpu := $(or $(destCpu),$(if $(filter powerpc,$(DEB_HOST_ARCH)),unsupported))
destCpu := $(or $(destCpu),$(if $(filter ppc64,$(DEB_HOST_ARCH)),ppc64))
destCpu := $(or $(destCpu),$(if $(filter s390x,$(DEB_HOST_ARCH)),s390x))

# solaris freebsd openbsd linux
destOs =
destOs := $(or $(destOs),$(if $(filter linux,$(DEB_HOST_ARCH_OS)),linux))
destOs := $(or $(destOs),$(if $(filter kfreebsd,$(DEB_HOST_ARCH_OS)),freebsd))

ifneq (, $(destOs))
DEB_CONFIGURE_EXTRA_FLAGS += --dest-os=$(destOs)
endif
ifeq (unsupported, $(destCpu))
$(error "nodejs cannot run on $(DEB_HOST_ARCH), please consult maintainers")
endif
ifneq (, $(destCpu))
DEB_CONFIGURE_EXTRA_FLAGS += --dest-cpu=$(destCpu)
endif

ifeq (freebsd, $(destOs))
LDFLAGS += -lbsd
endif

# mips and fpu, see https://github.com/paul99/v8m-rb/issues/192
# and https://bugs.debian.org/800410

# use r2, which is the supported variant for these architectures
# https://lists.debian.org/debian-mips/2016/07/msg00000.html
ifeq (mipsel, $(DEB_HOST_ARCH))
DEB_CONFIGURE_EXTRA_FLAGS += --with-mips-arch-variant=r2 --with-mips-fpu-mode=fpxx
endif
ifeq (mips, $(DEB_HOST_ARCH))
DEB_CONFIGURE_EXTRA_FLAGS += --with-mips-arch-variant=r2 --with-mips-fpu-mode=fpxx
endif

# mips32r1 or greater, detected at runtime
ifeq (mips64el, $(DEB_HOST_ARCH))
DEB_CONFIGURE_EXTRA_FLAGS += --with-mips-arch-variant=rx --with-mips-fpu-mode=fp64
endif

ifeq (armel, $(DEB_HOST_ARCH))
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-float-abi=softfp
ifeq ($(shell dpkg-vendor --is ubuntu && echo true),true)
# Ubuntu targets armv7+ with VFP and thumb2 support by default for armel
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-fpu=vfpv3
else
# debian defaults
# v8 does not support < armv5
CXXFLAGS += -march=armv5t
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-fpu=vfp
endif
endif

ifeq (armhf, $(DEB_HOST_ARCH))
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-float-abi=hard
ifeq ($(shell dpkg-vendor --derives-from raspbian && echo true),true)
# enable vfp, disable armv7
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-fpu=vfp
else
# enable armv7 vfpv3
DEB_CONFIGURE_EXTRA_FLAGS += --with-arm-fpu=vfpv3
endif
endif

DEB_DESTDIR = $(CURDIR)/debian/tmp
DEB_MAKE_CLEAN_TARGET = clean
ifeq ($(DEB_PARALLEL_JOBS),)
JOBS := 1
else ifeq ($(SCHROOT_USER),"buildd")
JOBS := 1
else
JOBS := $(DEB_PARALLEL_JOBS)
endif
export JOBS
DEB_MAKE_BUILD_TARGET = build

#  relax regression tests when targeted experimental suite
export HOME = $(CURDIR)/tmp
export FLAKY_TESTS = dontcare
export TEST_CI_ARGS = --arch=$(destCpu) --timeout=3000
export CI_JS_SUITES = message parallel sequential
export NODE_TEST_DIR = $(CURDIR)/tmp
# keep in mind ./debian/rules check is also invoked by adt-run, see debian/tests/
exp-relax-check := $(if $(shell dpkg-parsechangelog | grep -x 'Distribution: \(experimental\|UNRELEASED\)'),-i)
DEB_MAKE_CHECK_TARGET = $(exp-relax-check) test-ci-js

# build -fPIC
CFLAGS+=-fPIC
CPPFLAGS+=-fPIC
# hardening gyp
CFLAGS+=-g
CPPFLAGS+=-g
CXXFLAGS+=$(CPPFLAGS)
export CPPFLAGS
export CXXFLAGS
export CFLAGS

# disable DNS requests during tests
export RES_OPTIONS = attempts:0

# properly clean files from build, test, python
clean::
	rm -f icu_config.gypi
	rm -rf test/addons/doc-*
	rm -f test/addons/.buildstamp
	rm -f test/addons/.docbuildstamp
	rm -rf test/addons/*/build
	rm -f config.gypi
	rm -f config.mk
	rm -f test/fixtures/hello.txt
	rm -rf $(NODE_TEST_DIR)
	rm -f node_modules
	find . -name "*.pyc" -delete
	rm -rf out

# remove *.json files from documentation
binary-install/nodejs-doc::
	find debian/nodejs-doc/usr/share/doc/nodejs-doc -name *.json -delete

pre-build::
	ln -sTf /usr/lib/nodejs node_modules
	mkdir -p $(NODE_TEST_DIR)

build/nodejs-doc::
	make doc-only

# Provide dependency hints for reverse dependencies to consume
CDBS_SUGGESTS_nodejs-dev = debhelper
install/nodejs-dev::
	pod2man --release "" --center "" debian/dh_nodejs > $(cdbs_curdestdir)/usr/share/man/man1/dh_nodejs.1
	install -D debian/dh_nodejs $(cdbs_curdestdir)/usr/bin/dh_nodejs
	mkdir -p $(cdbs_curdestdir)/usr/share/nodejs
	echo '$(abi-deps)' > $(cdbs_curdestdir)/usr/share/nodejs/pluginsdep

check:
	-ln -s /usr/bin/node node
	mkdir -p $(NODE_TEST_DIR)
	make $(DEB_MAKE_CHECK_TARGET)
	rm -f node
	rm -rf $(NODE_TEST_DIR)
