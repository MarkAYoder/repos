#!/bin/sh
#
# see: dh_installdeb(1)

set -e

package="c9-core-installer"

sha256sum_tgz="ada7e30646fde01b965526e7171fa266411782f83f773f6425d066fc438264a5"
wfile="c9-core_3.0.1+git20150709-build.tar.xz"

partner_url="https://rcn-ee.com/repos/pkgs/c9v3"
extract_dir="/opt/cloud9/build/"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

dl_file() {
	wget ${partner_url}/${wfile}
}

validdate_file() {
	sha256compare=$(sha256sum ${wfile} | awk '{print $1}')
	if [ ! "x${sha256compare}" = "x${sha256sum_tgz}" ] ; then
		rm -rf ${wfile}
		dl_file
		sha256compare=$(sha256sum ${wfile} | awk '{print $1}')
		if [ ! "x${sha256compare}" = "x${sha256sum_tgz}" ] ; then
			echo "dl failure"
			exit 1
		fi
	fi
}

dl_install() {
	if [ ! -d /var/cache/${package} ] ; then
		mkdir -p /var/cache/${package}
	fi

	cd /var/cache/${package}/

	if [ ! -f ${wfile} ] ; then
		dl_file
	fi

	if [ -f ${wfile} ] ; then
		validdate_file

		systemctl stop cloud9.socket || true

		if [ ! -d ${extract_dir} ] ; then
			mkdir -p ${extract_dir} || true
		fi

		echo "extracting: ${wfile}"
		tar xf ${wfile} -C ${extract_dir}
		chown -R 1000:1000 ${extract_dir}

		if [ ! -d /var/lib/cloud9 ] ; then
			mkdir -p /var/lib/cloud9 || true
		fi

		systemctl --system daemon-reload || true
	fi
}

npmbox_dl_file () {
	cd /var/cache/${package}/
	if [ ! -f ${rfile} ] ; then
		if [ ! -f ${wfile} ] ; then
			dl_file
			mv ${wfile} ${rfile}
		fi
	fi
	wfile=${rfile}

	if [ -f ${wfile} ] ; then
		validdate_file
	fi
	cd "$C9_DIR"
}

maybe_install_depend () {
	if [ ! -f "$C9_DIR/node_modules/${pkg}/${package}.version" ] ; then
		echo "${package}:Installing: ${pkg}-${ver}.tgz (for ${npm_project})"
		"$NPM" install /var/cache/${package}/${pkg}-${ver}.tgz
		echo "${ver}" > "$C9_DIR/node_modules/${pkg}/${package}.version"
	else
		old_version=$(cat "$C9_DIR/node_modules/${pkg}/${package}.version")
		if [ ! "x${old_version}" = "x${ver}" ] ; then
			echo "${package}:Installing: ${pkg}-${ver}.tgz (for ${npm_project})"
			"$NPM" install /var/cache/${package}/${pkg}-${ver}.tgz
			echo "${ver}" > "$C9_DIR/node_modules/${pkg}/${package}.version"
		fi
	fi
}

c9_directory () {
	#FIXME: use npm install shrinkwrap
	#Based on: https://github.com/c9/install
	C9_DIR=/root/.c9
	NPM=$C9_DIR/node/bin/npm
	NODE=$C9_DIR/node/bin/node
	PYTHON=python

	VIRTUALENV_VERSION=virtualenv-12.0.7

	mkdir -p "$C9_DIR"/bin
	mkdir -p "$C9_DIR"/tmp
	mkdir -p "$C9_DIR"/node_modules
	mkdir -p "$C9_DIR"/box_tmp
	cd "$C9_DIR"

	#start install node tmux_install nak ptyjs vfsextend collab

	#node:
	mkdir -p "$C9_DIR"/node/bin
	ln -sf $(which nodejs) "$C9_DIR"/node/bin/node
	ln -sf $(which npm) "$C9_DIR"/node/bin/

	# use local npm cache
	"$NPM" config -g set cache  "$C9_DIR/tmp/.npm"
	# node-gyp uses sytem node or fails with command not found if
	# we don't bump this node up in the path
	PATH="$C9_DIR/node/bin/:$C9_DIR/node_modules/.bin:$PATH"

#	if [ -d "$C9_DIR"/$VIRTUALENV_VERSION ] ; then
#		rm -rf "$C9_DIR"/$VIRTUALENV_VERSION
#	fi
#	tar xzf /var/cache/${package}/$VIRTUALENV_VERSION.tar.gz

#	if [ -d "$C9_DIR"/virtualenv ] ; then
#		rm -rf "$C9_DIR"/virtualenv
#	fi
#	mv $VIRTUALENV_VERSION virtualenv

#	echo ${package}:python
#	"$PYTHON" virtualenv/virtualenv.py "$C9_DIR/python"
#	PYTHON="$C9_DIR/python/bin/python"
#	"$NPM" config -g set python "$PYTHON"

	#tmux_install
	ln -sf $(which tmux) "$C9_DIR"/bin/tmux

	npm_project="nak"

	#nak@0.3.3 node_modules/nak
	#├── simplefunc@0.0.2
	#├── colors@0.6.2
	#└── isbinaryfile@2.0.0

	#npm pack simplefunc@0.0.2
	pkg="simplefunc" ; ver="0.0.2" ; maybe_install_depend
	#npm pack colors@0.6.2
	pkg="colors" ; ver="0.6.2" ; maybe_install_depend
	#npm pack isbinaryfile@2.0.0
	pkg="isbinaryfile" ; ver="2.0.0" ; maybe_install_depend

	echo "${package}:Installing ${npm_project}"
	#npm pack https://github.com/c9/nak/tarball/c9
	"$NPM" install /var/cache/${package}/nak-0.3.3.tgz

	partner_url="https://rcn-ee.com/repos/git/archive/c9-npmbox"

	#b164be30ee2896066696b15e184f1b1fb420dfb32608b060a6dc906232c01ec8  npmbox-2.7.0.npmbox
	#d3781784149b85323c7ac3b4e4e8a090d2fecc4c747f83dd427590aaee24f7fa  node-gyp-2.0.2.npmbox
	#35c29c2dc5c9abca141b0c33c405a3a2d2e802cbc8dfe4476fec18068090258f  pty.js@0.2.7-1.npmbox

	sha256sum_tgz="b164be30ee2896066696b15e184f1b1fb420dfb32608b060a6dc906232c01ec8"
	wfile="npmbox-2.7.0.npmbox"
	rfile="npmbox.npmbox"

	npmbox_dl_file

	sha256sum_tgz="d3781784149b85323c7ac3b4e4e8a090d2fecc4c747f83dd427590aaee24f7fa"
	wfile="node-gyp-2.0.2.npmbox"
	rfile="node-gyp.npmbox"

	npmbox_dl_file

	sha256sum_tgz="35c29c2dc5c9abca141b0c33c405a3a2d2e802cbc8dfe4476fec18068090258f"
	wfile="pty.js@0.2.7-1.npmbox"
	rfile="pty.js@0.2.7-1.npmbox"

	npmbox_dl_file

	cd "$C9_DIR"

	echo :Installing npmbox

	cd "$C9_DIR"/box_tmp

	tar xzf /var/cache/${package}/npmbox-2.7.0.npmbox
	"$NPM" install --cache ./.npmbox.cache --optional --cache-min 99999 --shrinkwrap false npmbox

	NPMUNBOX=$C9_DIR/node_modules/npmbox/bin/npmunbox

	cd "$C9_DIR"/
	rm -rf ./box_tmp || true

	echo :Installing pty.js
	"$NPMUNBOX" /var/cache/${package}/node-gyp.npmbox
	"$NPMUNBOX" /var/cache/${package}/pty.js@0.2.7-1.npmbox

	HASPTY=`"$C9_DIR/node/bin/node" -e "console.log(require('pty.js'))" | grep createTerminal | wc -l`
	if [ $HASPTY -ne 1 ]; then
	  echo "Unknown exception installing pty.js"
	  echo `"$C9_DIR/node/bin/node" -e "console.log(require('pty.js'))"`
	  exit 100
	fi

# vfsextend collab

	#Cleanup:
	"$NPM" config -g delete cache
	"$NPM" config -g delete tmp
	"$NPM" config -g delete python
}

case "$1" in
    configure)
	dl_install
	c9_directory
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

