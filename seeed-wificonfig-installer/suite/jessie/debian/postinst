#!/bin/sh
#
# see: dh_installdeb(1)

set -e

package="seeed-wificonfig-installer"
service="wifidog-gateway"
npm_file="wificonfig-0.1.5-39fe0fb-v0.12.13.tar.xz"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

export NODE_PATH=/usr/local/lib/node_modules

npm_options="--unsafe-perm=true --progress=false --loglevel=error --prefix /usr/local"

npm_actually_install () {
	echo "${package}:Installing: ${pkg}-${ver} (for ${npm_project})"
	TERM=dumb ${node_bin} ${npm_bin} install -g ${npm_options} ${pkg}@${ver}
	echo "${ver}" > "${pkg_path}/${pkg}.version"
	echo "${node_version}" > "${pkg_path}/${pkg}.node_version"
}

npm_check_n_install () {
	pkg_path="${NODE_PATH}/${pkg}"
	if [ ! -f "${pkg_path}/${pkg}.version" ] ; then
		npm_actually_install
	else
		unset old_version
		if [ -f "${pkg_path}/${pkg}.version" ] ; then
			old_version=$(cat "${pkg_path}/${pkg}.version" || true)
		fi
		if [ ! "x${old_version}" = "x${ver}" ] ; then
			rm -rf "${pkg_path}/" || true
			npm_actually_install
		else
			unset old_version
			if [ -f "${pkg_path}/${pkg}.node_version" ] ; then
				old_version=$(cat "${pkg_path}/${pkg}.node_version" || true)
			fi
			if [ ! "x${old_version}" = "x${node_version}" ] ; then
				rm -rf "${pkg_path}/" || true
				npm_actually_install
			fi
		fi
	fi
}

npm_pkg_install () {
	systemctl stop wificonfig.service || true
	if [ -d /usr/local/lib/node_modules/${npm_project}/ ] ; then
		rm -rf /usr/local/lib/node_modules/${npm_project}/ || true
	fi

	echo "${package}:updating: /usr/local/lib/node_modules/${npm_project}/"
	tar xf /var/cache/${package}/${npm_file} -C /usr/local/lib/node_modules/
}

npm_install () {
	node_bin="/usr/bin/nodejs"
	npm_bin="/usr/bin/npm"

	unset node_version
	node_version=$(/usr/bin/nodejs --version || true)

	echo "${package}:npm: [`${node_bin} ${npm_bin} --version`]"
	echo "${package}:node: [`${node_bin} --version`]"

	npm_project="wificonfig"
	#released version..
	#pkg="wificonfig" ; ver="0.1.0" ; npm_check_n_install
	npm_pkg_install

	if [ ! -d ${NODE_PATH}/${pkg}/log/ ] ; then
		mkdir -p ${NODE_PATH}/${pkg}/log/ || true
	fi

	unset restart_connman

	if [ -f /lib/systemd/system/connman.service ] ; then
		unset check_connman
		check_connman=$(cat /lib/systemd/system/connman.service | grep ExecStart | grep nodnsproxy || true)
		if [ "x${check_connman}" = "x" ] ; then
			echo "${package}:disabling connman dns service"
			sed -i -e 's:-n:-n --nodnsproxy:g' /lib/systemd/system/connman.service
			restart_connman="enable"
		fi
	fi

	if [ -f /etc/connman/main.conf ] ; then
		unset check_connman
		check_connman=$(cat /etc/connman/main.conf | grep NetworkInterfaceBlacklist | grep SoftAp0 || true)
		if [ "x${check_connman}" = "x" ] ; then
			sed -i -e 's:=usb0:=SoftAp0,usb0:g' /etc/connman/main.conf
			restart_connman="enable"
		fi
	fi

	if [ -f /etc/connman/main.conf ] ; then
		unset check_connman
		check_connman=$(cat /etc/connman/main.conf | grep SoftAp0,usb0 || true)
		if [ "x${check_connman}" = "x" ] ; then
			sed -i -e 's:usb0,SoftAp0:SoftAp0,usb0:g' /etc/connman/main.conf
			restart_connman="enable"
		fi
	fi

	if [ -f /var/lib/connman/settings ] ; then
		unset check_connman
		check_connman=$(cat /var/lib/connman/settings | grep Tethering=true || true)
		if [ ! "x${check_connman}" = "x" ] ; then
			sed -i -e 's:Tethering=true:Tethering=false:g' /var/lib/connman/settings
			restart_connman="enable"
		fi
	fi

	if [ "x${restart_connman}" = "xenable" ] ; then
		systemctl restart connman.service || true
	fi

	systemctl enable wifidog-pre-startup.service || true
	systemctl enable wifidog-gateway.service || true

	systemctl disable wificonfig.socket || true
	systemctl disable wificonfig.service || true

	#disable bonescript port 80...
	systemctl stop bonescript.socket || true
	systemctl disable bonescript.socket || true

	systemctl stop bonescript-autorun.service || true
	systemctl disable bonescript-autorun.service || true
	mkdir -p /etc/wificonfig/ || true
	echo "${package}:Installed"
}

case "$1" in
    configure)
	npm_install
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

